{
  "openapi": "3.1.0",
  "info": {
    "title": "MecaPy API",
    "description": "API for MecaPy with Keycloak authentication and database persistence",
    "version": "0.1.2.post25.dev0+2304069"
  },
  "paths": {
    "/functions/from-git": {
      "post": {
        "tags": [
          "functions"
        ],
        "summary": "Deploy Function From Git",
        "description": "Deploy a serverless function from a Git repository.\n\nThis endpoint clones a Git repository, validates the code for security,\nand deploys it as a serverless function. Supports both public and private\nrepositories (with authentication token).\n\nSecurity features:\n- Validates Git URL against allowed providers (GitHub, GitLab, Bitbucket)\n- Scans code for dangerous imports (os, subprocess, eval, etc.)\n- Enforces repository size limits (100MB)\n- Validates Python syntax\n- Creates isolated execution environment\n\nParameters\n----------\nrequest : FunctionFromGitRequest\n    Git repository configuration including URL, branch, and optional subdirectory\ncurrent_user : UserInfo\n    Authenticated user (injected by dependency)\nsession : AsyncSession\n    Database session\n\nReturns\n-------\nFunctionDeployResponse\n    Deployment confirmation with function details\n\nRaises\n------\nHTTPException\n    - 400: Invalid Git URL or repository structure\n    - 409: Function name already exists\n    - 422: Code validation failed (dangerous patterns detected)\n    - 500: Deployment or Git cloning failed\n\nExample\n-------\n    ```python\n    # Deploy from public GitHub repository\n    response = await client.post(\n        \"/functions/from-git\",\n        json={\n            \"name\": \"calculate_stress\",\n            \"description\": \"Calculate mechanical stress from repository\",\n            \"git_url\": \"https://github.com/user/mechanics-functions.git\",\n            \"git_ref\": \"main\",\n            \"subdirectory\": \"functions/stress\",\n            \"runtime\": \"python311\",\n            \"handler\": \"main.calculate\",\n        },\n    )\n\n    # Deploy from private repository with token\n    response = await client.post(\n        \"/functions/from-git\",\n        json={\n            \"name\": \"proprietary_calc\",\n            \"git_url\": \"https://github.com/company/private-repo.git\",\n            \"git_token\": \"ghp_xxxxxxxxxxxx\",\n            \"git_ref\": \"v1.0.0\",\n        },\n    )\n    ```",
        "operationId": "deploy_function_from_git_functions_from_git_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionFromGitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDeployResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/functions/deploy": {
      "post": {
        "tags": [
          "functions"
        ],
        "summary": "Deploy Function",
        "description": "Deploy a new serverless function.\n\nThis endpoint allows users to deploy their code as serverless functions\non the cloud infrastructure. The function code should be provided as\na base64-encoded ZIP archive containing the source code.\n\nThe platform automatically manages:\n- Instance scaling (min/max instances are optimized automatically)\n- Resource allocation based on usage patterns\n- Load balancing and high availability\n- Cold start optimization\n\nArgs:\n    request: Function deployment configuration including code, runtime, and settings\n    current_user: The authenticated user (injected by dependency)\n\nReturns\n-------\n    FunctionDeployResponse: Deployment confirmation with function details\n\nRaises\n------\n    HTTPException: If deployment fails, user is not authenticated,\n                  or function name already exists for this user\n\nExample:\n    ```python\n    # Base64 encode your zip file\n    import base64\n\n    with open(\"my_function.zip\", \"rb\") as f:\n        code_b64 = base64.b64encode(f.read()).decode()\n\n    # Deploy the function\n    response = await client.post(\n        \"/functions/deploy\",\n        json={\n            \"name\": \"calculate_bolt_strength\",\n            \"description\": \"Calculate bolt strength according to ISO 4762\",\n            \"runtime\": \"python311\",\n            \"handler\": \"main.calculate\",\n            \"code\": code_b64,\n            \"environment_variables\": {\"SAFETY_FACTOR\": \"1.5\"},\n        },\n    )\n    ```",
        "operationId": "deploy_function_functions_deploy_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDeployResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/functions": {
      "get": {
        "tags": [
          "functions"
        ],
        "summary": "List Functions",
        "description": "List all functions for the authenticated user.\n\nReturns a paginated list of all serverless functions deployed by the current user.\nEach function includes its current status, endpoint URL, and execution statistics.\n\nArgs:\n    current_user: The authenticated user (injected by dependency)\n    page: Page number for pagination (starts at 1)\n    per_page: Number of functions per page (max 100)\n\nReturns\n-------\n    FunctionListResponse: Paginated list of user functions\n\nRaises\n------\n    HTTPException: If user is not authenticated",
        "operationId": "list_functions_functions_get",
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/functions/{function_id}": {
      "get": {
        "tags": [
          "functions"
        ],
        "summary": "Get Function",
        "description": "Get details of a specific function.\n\nRetrieves detailed information about a specific function, including its current\nstatus, configuration, and execution statistics. Only the function owner can\naccess this information.\n\nArgs:\n    function_id: Unique identifier of the function\n    current_user: The authenticated user (injected by dependency)\n\nReturns\n-------\n    FunctionResponse: Complete function details\n\nRaises\n------\n    HTTPException: If function not found or user doesn't have access",
        "operationId": "get_function_functions__function_id__get",
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "functions"
        ],
        "summary": "Delete Function",
        "description": "Delete a deployed function.\n\nPermanently removes a function from serverless infrastructure and the platform.\nThis action cannot be undone. All function data and execution history will be lost.\n\nArgs:\n    function_id: Unique identifier of the function to delete\n    current_user: The authenticated user (injected by dependency)\n\nReturns\n-------\n    dict: Deletion confirmation message\n\nRaises\n------\n    HTTPException: If function not found or user doesn't have access",
        "operationId": "delete_function_functions__function_id__delete",
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/functions/{function_id}/execute": {
      "post": {
        "tags": [
          "functions"
        ],
        "summary": "Execute Function",
        "description": "Execute a deployed function asynchronously.\n\nSubmits a function execution job to the worker queue via Redis.\nThe function runs in an isolated Docker container and results are\navailable via the /jobs/{job_id}/result endpoint once completed.\n\nParameters\n----------\nfunction_id : str\n    Unique identifier of the function to execute\nrequest : FunctionExecuteRequest\n    Execution parameters including input payload\ncurrent_user : UserInfo\n    Authenticated user (injected by dependency)\nsession : AsyncSession\n    Database session\n\nReturns\n-------\nJobSubmitResponse\n    Job submission confirmation with job_id for tracking\n\nRaises\n------\nHTTPException\n    If function not found, not ready, or execution fails\n\nExample\n-------\n    ```python\n    # Execute function with input data\n    response = await client.post(\n        f\"/functions/{function_id}/execute\",\n        json={\"payload\": {\"diameter\": 12, \"force\": 5000}},\n    )\n\n    # Get job ID for tracking\n    job_id = response.json()[\"job_id\"]\n\n    # Poll for result\n    result = await client.get(f\"/jobs/{job_id}/result\")\n    ```",
        "operationId": "execute_function_functions__function_id__execute_post",
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Function Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionExecuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Status",
        "description": "Get status of a running or completed job.\n\nRetrieves the current status of a job submitted for execution.\nThe job can be in various states: pending, running, completed, failed, or timeout.\n\nParameters\n----------\njob_id : str\n    Unique job identifier returned from function execution\n\nReturns\n-------\nJobStatusResponse\n    Current job status with metadata\n\nRaises\n------\nHTTPException\n    If job not found (404)\n\nExample\n-------\n    ```python\n    response = await client.get(f\"/jobs/{job_id}\")\n    status = response.json()\n    print(f\"Job status: {status['status']}\")\n    ```",
        "operationId": "get_job_status_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{job_id}/result": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Result",
        "description": "Get result of a completed job.\n\nRetrieves the execution result and output data of a completed job.\nThis endpoint returns the actual output from the function execution,\nalong with performance metrics like duration and memory usage.\n\nParameters\n----------\njob_id : str\n    Unique job identifier\n\nReturns\n-------\nJobResultResponse\n    Job result with output data and metrics\n\nRaises\n------\nHTTPException\n    If job not found (404) or not completed yet (409)\n\nExample\n-------\n    ```python\n    response = await client.get(f\"/jobs/{job_id}/result\")\n    result = response.json()\n\n    if result['status'] == 'completed':\n        outputs = result['result']\n        print(f\"Calculation result: {outputs}\")\n        print(f\"Duration: {result['duration_ms']}ms\")\n    ```",
        "operationId": "get_job_result_jobs__job_id__result_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get information about the currently authenticated user.\n\nThis endpoint requires authentication.",
        "operationId": "get_current_user_info_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/auth/protected": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Protected Route",
        "description": "Example protected route that requires authentication.",
        "operationId": "protected_route_auth_protected_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/auth/admin": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Admin Route",
        "description": "Example admin route that requires the admin role.",
        "operationId": "admin_route_auth_admin_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/packages/from-git": {
      "post": {
        "tags": [
          "packages"
        ],
        "summary": "Deploy Package From Git",
        "description": "Deploy a multi-function package from a Git repository.\n\nThis endpoint clones a Git repository containing a mecapy.yml manifest,\nvalidates the package version, extracts all functions, and deploys them as\nserverless functions. Supports both public and private repositories.\n\nThe manifest format is simple and minimal with automatic schema introspection.\nSchemas are auto-generated from Python type hints and docstrings, with optional\nexplicit overrides when needed.\n\nWorkflow:\n1. Clone Git repository\n2. Find and parse mecapy.yml manifest\n2.5. Validate manifest version against Git tags\n3. Validate package version (409 if exists)\n4. Upload package source to S3\n5. Create Package and PackageVersion records\n6. Extract and deploy each function (with auto-introspection)\n7. Load and validate test cases (if enabled)\n8. Update package status\n9. Cleanup temporary files\n\nSecurity features:\n- Validates Git URL against allowed providers\n- Enforces SemVer versioning (MAJOR.MINOR.PATCH)\n- Prevents version conflicts (immutable versions)\n- Validates import paths and function code\n- Scans for dangerous imports\n\nParameters\n----------\nrequest : PackageFromGitRequest\n    Package deployment configuration including Git URL, ref, and deployment strategy\ncurrent_user : UserInfo\n    Authenticated user (injected by dependency)\nsession : AsyncSession\n    Database session\n\nReturns\n-------\nPackageDeployResponse\n    Deployment results with package info and deployment statistics\n\nRaises\n------\nHTTPException\n    - 400: Invalid Git URL, manifest not found, or malformed manifest\n    - 404: Package manifest (mecapy.yml) not found\n    - 409: Package version already exists (version conflict)\n    - 422: Code validation failed or invalid import paths\n    - 500: Deployment or Git cloning failed\n\nExample\n-------\n    ```python\n    # Deploy entire package from GitHub\n    response = await client.post(\n        \"/packages/from-git\",\n        json={\n            \"git_url\": \"https://github.com/mecapy/boulonnerie.git\",\n            \"git_ref\": \"main\",\n            \"deploy_strategy\": \"all\",\n        },\n    )\n\n    # Deploy specific functions from package\n    response = await client.post(\n        \"/packages/from-git\",\n        json={\n            \"git_url\": \"https://github.com/mecapy/boulonnerie.git\",\n            \"git_ref\": \"v1.2.0\",\n            \"deploy_strategy\": \"selective\",\n            \"functions\": [\"calcul-contrainte\", \"calcul-cisaillement\"],\n        },\n    )\n    ```\n\nNotes\n-----\n- Package versions are immutable. To update, increment version in manifest.\n- Function versions are automatically created and linked to package version.\n- Checksums are calculated for audit and integrity verification.\n- Test cases validation (if enabled) runs after deployment.",
        "operationId": "deploy_package_from_git_packages_from_git_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageFromGitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageDeployResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2AuthorizationCodeBearer": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check Endpoint",
        "description": "Comprehensive health check including database connectivity.\n\nReturns\n-------\n    dict: Health status of the application and its components",
        "operationId": "health_check_endpoint_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FunctionCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Name",
            "description": "Function name (must be unique for the user)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Function description for documentation"
          },
          "runtime": {
            "$ref": "#/components/schemas/FunctionRuntime",
            "description": "Runtime environment for the function",
            "default": "python311"
          },
          "handler": {
            "type": "string",
            "maxLength": 100,
            "title": "Handler",
            "description": "Entry point of the function (e.g., 'main.handler')",
            "default": "main.handler"
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "title": "Code",
            "description": "Function source code (base64 encoded zip archive)"
          },
          "environment_variables": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Variables",
            "description": "Environment variables for the function"
          },
          "memory_limit": {
            "type": "integer",
            "maximum": 3008.0,
            "minimum": 128.0,
            "title": "Memory Limit",
            "description": "Memory limit in MB (automatically optimized)",
            "default": 128
          },
          "timeout": {
            "type": "integer",
            "maximum": 900.0,
            "minimum": 1.0,
            "title": "Timeout",
            "description": "Timeout in seconds",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "name",
          "code"
        ],
        "title": "FunctionCreateRequest",
        "description": "Request model for creating a serverless function."
      },
      "FunctionDeployResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Deployment status message"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionResponse",
            "description": "Function details"
          },
          "deployment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deployment Id",
            "description": "Deployment tracking ID"
          }
        },
        "type": "object",
        "required": [
          "message",
          "function"
        ],
        "title": "FunctionDeployResponse",
        "description": "Response model for function deployment."
      },
      "FunctionExecuteRequest": {
        "properties": {
          "payload": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload",
            "description": "Input data for the function"
          },
          "async_execution": {
            "type": "boolean",
            "title": "Async Execution",
            "description": "Whether to execute asynchronously",
            "default": false
          }
        },
        "type": "object",
        "title": "FunctionExecuteRequest",
        "description": "Request model for executing a function."
      },
      "FunctionFromGitRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Name",
            "description": "Function name (must be unique for the user)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Function description for documentation"
          },
          "git_url": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Git Url",
            "description": "Git repository URL (HTTPS or SSH)",
            "examples": [
              "https://github.com/user/repo.git",
              "git@github.com:user/repo.git"
            ]
          },
          "git_ref": {
            "type": "string",
            "maxLength": 200,
            "title": "Git Ref",
            "description": "Git reference (branch, tag, or commit SHA)",
            "default": "main",
            "examples": [
              "main",
              "v1.0.0",
              "abc123def"
            ]
          },
          "subdirectory": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Subdirectory",
            "description": "Subdirectory path within repository containing the function code",
            "examples": [
              "functions/calculate",
              "src"
            ]
          },
          "runtime": {
            "$ref": "#/components/schemas/FunctionRuntime",
            "description": "Runtime environment for the function",
            "default": "python311"
          },
          "handler": {
            "type": "string",
            "maxLength": 100,
            "title": "Handler",
            "description": "Entry point of the function (e.g., 'main.handler')",
            "default": "main.handler"
          },
          "environment_variables": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Variables",
            "description": "Environment variables for the function"
          },
          "memory_limit": {
            "type": "integer",
            "maximum": 3008.0,
            "minimum": 128.0,
            "title": "Memory Limit",
            "description": "Memory limit in MB (automatically optimized)",
            "default": 128
          },
          "timeout": {
            "type": "integer",
            "maximum": 900.0,
            "minimum": 1.0,
            "title": "Timeout",
            "description": "Timeout in seconds",
            "default": 30
          },
          "git_token": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Git Token",
            "description": "Personal access token for private repositories (stored securely)"
          },
          "requirements_file": {
            "type": "string",
            "maxLength": 100,
            "title": "Requirements File",
            "description": "Name of requirements file in repository",
            "default": "requirements.txt"
          }
        },
        "type": "object",
        "required": [
          "name",
          "git_url"
        ],
        "title": "FunctionFromGitRequest",
        "description": "Request model for creating a function from a Git repository."
      },
      "FunctionListResponse": {
        "properties": {
          "functions": {
            "items": {
              "$ref": "#/components/schemas/FunctionResponse"
            },
            "type": "array",
            "title": "Functions",
            "description": "List of user functions"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of functions"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number",
            "default": 1
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Items per page",
            "default": 20
          }
        },
        "type": "object",
        "required": [
          "functions",
          "total"
        ],
        "title": "FunctionListResponse",
        "description": "Response model for listing functions."
      },
      "FunctionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique function identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Function name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Function description"
          },
          "runtime": {
            "$ref": "#/components/schemas/FunctionRuntime",
            "description": "Function runtime"
          },
          "handler": {
            "type": "string",
            "title": "Handler",
            "description": "Function handler"
          },
          "status": {
            "$ref": "#/components/schemas/FunctionStatus",
            "description": "Current function status"
          },
          "serverless_function_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Serverless Function Id",
            "description": "Serverless function ID"
          },
          "serverless_namespace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Serverless Namespace Id",
            "description": "Serverless namespace ID"
          },
          "endpoint_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Endpoint Url",
            "description": "Function endpoint URL"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Last update timestamp"
          },
          "owner_id": {
            "type": "string",
            "title": "Owner Id",
            "description": "User ID of the function owner"
          },
          "memory_limit": {
            "type": "integer",
            "title": "Memory Limit",
            "description": "Configured memory limit in MB"
          },
          "timeout": {
            "type": "integer",
            "title": "Timeout",
            "description": "Configured timeout in seconds"
          },
          "execution_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Execution Count",
            "description": "Total executions"
          },
          "last_execution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Execution",
            "description": "Last execution timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "runtime",
          "handler",
          "status",
          "created_at",
          "updated_at",
          "owner_id",
          "memory_limit",
          "timeout"
        ],
        "title": "FunctionResponse",
        "description": "Response model for function operations."
      },
      "FunctionRuntime": {
        "type": "string",
        "enum": [
          "python39",
          "python310",
          "python311",
          "python312",
          "nodejs18",
          "nodejs20"
        ],
        "title": "FunctionRuntime",
        "description": "Available runtimes for serverless functions."
      },
      "FunctionStatus": {
        "type": "string",
        "enum": [
          "pending",
          "deploying",
          "ready",
          "error",
          "updating"
        ],
        "title": "FunctionStatus",
        "description": "Function deployment and execution status."
      },
      "FunctionVersionInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Function name"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Function version (SemVer)"
          },
          "handler": {
            "type": "string",
            "title": "Handler",
            "description": "Import path (module:callable)"
          },
          "checksum": {
            "type": "string",
            "title": "Checksum",
            "description": "SHA256 checksum of function code"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Deployment status of this version"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version",
          "handler",
          "checksum",
          "status",
          "created_at"
        ],
        "title": "FunctionVersionInfo",
        "description": "Information about a function version within a package."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "JobResultResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Job identifier"
          },
          "function_id": {
            "type": "string",
            "title": "Function Id",
            "description": "Function identifier"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "Job status"
          },
          "result": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result",
            "description": "Function output data"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          },
          "duration_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Ms",
            "description": "Execution duration in milliseconds"
          },
          "memory_used_mb": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Memory Used Mb",
            "description": "Memory used in MB"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "function_id",
          "status"
        ],
        "title": "JobResultResponse",
        "description": "Response model for job result retrieval."
      },
      "JobStatus": {
        "type": "string",
        "enum": [
          "pending",
          "running",
          "completed",
          "failed",
          "timeout"
        ],
        "title": "JobStatus",
        "description": "Job execution status."
      },
      "JobStatusResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Job identifier"
          },
          "function_id": {
            "type": "string",
            "title": "Function Id",
            "description": "Function identifier"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "Current job status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "Job start timestamp"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "Job completion timestamp"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "function_id",
          "status"
        ],
        "title": "JobStatusResponse",
        "description": "Response model for job status query."
      },
      "JobSubmitResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Unique job identifier"
          },
          "function_id": {
            "type": "string",
            "title": "Function Id",
            "description": "Function identifier"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "Initial job status",
            "default": "pending"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message",
            "default": "Job submitted successfully"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "function_id"
        ],
        "title": "JobSubmitResponse",
        "description": "Response model for job submission."
      },
      "PackageDeployResponse": {
        "properties": {
          "package": {
            "$ref": "#/components/schemas/PackageResponse",
            "description": "Deployed package information"
          },
          "functions_deployed": {
            "type": "integer",
            "title": "Functions Deployed",
            "description": "Number of functions deployed"
          },
          "functions_updated": {
            "type": "integer",
            "title": "Functions Updated",
            "description": "Number of functions updated",
            "default": 0
          },
          "functions_unchanged": {
            "type": "integer",
            "title": "Functions Unchanged",
            "description": "Number of functions unchanged",
            "default": 0
          },
          "validation_results": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Results",
            "description": "Test case validation results if enabled"
          },
          "deployment_qualified": {
            "type": "boolean",
            "title": "Deployment Qualified",
            "description": "Whether deployment passed all validations",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "package",
          "functions_deployed"
        ],
        "title": "PackageDeployResponse",
        "description": "Response model for package deployment."
      },
      "PackageFromGitRequest": {
        "properties": {
          "git_url": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Git Url",
            "description": "Git repository URL (HTTPS or SSH)",
            "examples": [
              "https://github.com/user/mecapy-boulonnerie.git"
            ]
          },
          "git_ref": {
            "type": "string",
            "maxLength": 200,
            "title": "Git Ref",
            "description": "Git reference (branch, tag, or commit SHA)",
            "default": "main",
            "examples": [
              "main",
              "v1.0.0",
              "abc123def"
            ]
          },
          "git_token": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Git Token",
            "description": "Personal access token for private repositories"
          },
          "deploy_strategy": {
            "type": "string",
            "pattern": "^(all|selective)$",
            "title": "Deploy Strategy",
            "description": "Deployment strategy: 'all' (deploy all functions) or 'selective'",
            "default": "all"
          },
          "functions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Functions",
            "description": "List of function names to deploy (only for 'selective' strategy)",
            "examples": [
              [
                "calcul-contrainte",
                "calcul-cisaillement"
              ]
            ]
          }
        },
        "type": "object",
        "required": [
          "git_url"
        ],
        "title": "PackageFromGitRequest",
        "description": "Request model for creating a package from Git repository."
      },
      "PackageResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique package identifier"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Package name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Package description"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Package version (SemVer)"
          },
          "status": {
            "$ref": "#/components/schemas/PackageStatus",
            "description": "Package status"
          },
          "git_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Git Url",
            "description": "Git repository URL"
          },
          "git_ref": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Git Ref",
            "description": "Git reference"
          },
          "git_commit_sha": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Git Commit Sha",
            "description": "Git commit SHA"
          },
          "author": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author",
            "description": "Package author"
          },
          "license": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "License",
            "description": "License (MIT, Apache-2.0, etc.)"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Package category"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Tags for categorization"
          },
          "functions": {
            "items": {
              "$ref": "#/components/schemas/FunctionVersionInfo"
            },
            "type": "array",
            "title": "Functions",
            "description": "Functions in this package"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Package creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Last update timestamp"
          },
          "owner_id": {
            "type": "string",
            "title": "Owner Id",
            "description": "User ID of the package owner"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version",
          "status",
          "created_at",
          "updated_at",
          "owner_id"
        ],
        "title": "PackageResponse",
        "description": "Response model for package information."
      },
      "PackageStatus": {
        "type": "string",
        "enum": [
          "pending",
          "deploying",
          "ready",
          "error",
          "updating"
        ],
        "title": "PackageStatus",
        "description": "Package deployment status."
      },
      "UserInfo": {
        "properties": {
          "sub": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub"
          },
          "preferred_username": {
            "type": "string",
            "title": "Preferred Username"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "given_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Given Name"
          },
          "family_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Family Name"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles"
          }
        },
        "type": "object",
        "required": [
          "preferred_username"
        ],
        "title": "UserInfo",
        "description": "User information model extracted from JWT token."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2AuthorizationCodeBearer": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "scopes": {},
            "authorizationUrl": "https://keycloak.example.com/realms/mecapy/authorize",
            "tokenUrl": "https://keycloak.example.com/realms/mecapy/token"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.mecapy.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ]
}